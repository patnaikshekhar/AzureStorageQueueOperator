/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/patnaikshekhar/azure_queue_operator/pkg/apis/azurequeue/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AzureQueueLister helps list AzureQueues.
type AzureQueueLister interface {
	// List lists all AzureQueues in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.AzureQueue, err error)
	// AzureQueues returns an object that can list and get AzureQueues.
	AzureQueues(namespace string) AzureQueueNamespaceLister
	AzureQueueListerExpansion
}

// azureQueueLister implements the AzureQueueLister interface.
type azureQueueLister struct {
	indexer cache.Indexer
}

// NewAzureQueueLister returns a new AzureQueueLister.
func NewAzureQueueLister(indexer cache.Indexer) AzureQueueLister {
	return &azureQueueLister{indexer: indexer}
}

// List lists all AzureQueues in the indexer.
func (s *azureQueueLister) List(selector labels.Selector) (ret []*v1alpha1.AzureQueue, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AzureQueue))
	})
	return ret, err
}

// AzureQueues returns an object that can list and get AzureQueues.
func (s *azureQueueLister) AzureQueues(namespace string) AzureQueueNamespaceLister {
	return azureQueueNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AzureQueueNamespaceLister helps list and get AzureQueues.
type AzureQueueNamespaceLister interface {
	// List lists all AzureQueues in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.AzureQueue, err error)
	// Get retrieves the AzureQueue from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.AzureQueue, error)
	AzureQueueNamespaceListerExpansion
}

// azureQueueNamespaceLister implements the AzureQueueNamespaceLister
// interface.
type azureQueueNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AzureQueues in the indexer for a given namespace.
func (s azureQueueNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.AzureQueue, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.AzureQueue))
	})
	return ret, err
}

// Get retrieves the AzureQueue from the indexer for a given namespace and name.
func (s azureQueueNamespaceLister) Get(name string) (*v1alpha1.AzureQueue, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("azurequeue"), name)
	}
	return obj.(*v1alpha1.AzureQueue), nil
}
